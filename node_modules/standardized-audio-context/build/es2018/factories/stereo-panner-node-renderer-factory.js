import { connectAudioParam } from '../helpers/connect-audio-param';
import { getNativeAudioNode } from '../helpers/get-native-audio-node';
import { isOwnedByContext } from '../helpers/is-owned-by-context';
import { renderAutomation } from '../helpers/render-automation';
import { renderInputsOfAudioNode } from '../helpers/render-inputs-of-audio-node';
export const createStereoPannerNodeRendererFactory = (createNativeStereoPannerNode) => {
    return () => {
        let nativeStereoPannerNode = null;
        return {
            render: async (proxy, nativeOfflineAudioContext) => {
                if (nativeStereoPannerNode !== null) {
                    return nativeStereoPannerNode;
                }
                nativeStereoPannerNode = getNativeAudioNode(proxy);
                /*
                 * If the initially used nativeStereoPannerNode was not constructed on the same OfflineAudioContext it needs to be created
                 * again.
                 */
                if (!isOwnedByContext(nativeStereoPannerNode, nativeOfflineAudioContext)) {
                    const options = {
                        channelCount: nativeStereoPannerNode.channelCount,
                        channelCountMode: nativeStereoPannerNode.channelCountMode,
                        channelInterpretation: nativeStereoPannerNode.channelInterpretation,
                        pan: nativeStereoPannerNode.pan.value
                    };
                    nativeStereoPannerNode = createNativeStereoPannerNode(nativeOfflineAudioContext, options);
                    await renderAutomation(proxy.context, nativeOfflineAudioContext, proxy.pan, nativeStereoPannerNode.pan);
                }
                else {
                    await connectAudioParam(proxy.context, nativeOfflineAudioContext, proxy.pan);
                }
                if (nativeStereoPannerNode.inputs !== undefined) {
                    await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeStereoPannerNode.inputs[0]);
                }
                else {
                    await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeStereoPannerNode);
                }
                return nativeStereoPannerNode;
            }
        };
    };
};
//# sourceMappingURL=/build/es2018/factories/stereo-panner-node-renderer-factory.js.map