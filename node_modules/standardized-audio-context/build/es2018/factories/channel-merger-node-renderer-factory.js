import { getNativeAudioNode } from '../helpers/get-native-audio-node';
import { isOwnedByContext } from '../helpers/is-owned-by-context';
import { renderInputsOfAudioNode } from '../helpers/render-inputs-of-audio-node';
export const createChannelMergerNodeRendererFactory = (createNativeChannelMergerNode) => {
    return () => {
        let nativeAudioNode = null;
        return {
            render: async (proxy, nativeOfflineAudioContext) => {
                if (nativeAudioNode !== null) {
                    return nativeAudioNode;
                }
                nativeAudioNode = getNativeAudioNode(proxy);
                // If the initially used nativeAudioNode was not constructed on the same OfflineAudioContext it needs to be created again.
                if (!isOwnedByContext(nativeAudioNode, nativeOfflineAudioContext)) {
                    const options = {
                        channelCount: nativeAudioNode.channelCount,
                        channelCountMode: nativeAudioNode.channelCountMode,
                        channelInterpretation: nativeAudioNode.channelInterpretation,
                        numberOfInputs: nativeAudioNode.numberOfInputs
                    };
                    nativeAudioNode = createNativeChannelMergerNode(nativeOfflineAudioContext, options);
                }
                await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeAudioNode);
                return nativeAudioNode;
            }
        };
    };
};
//# sourceMappingURL=/build/es2018/factories/channel-merger-node-renderer-factory.js.map