(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@babel/runtime/regenerator'), require('@babel/runtime/helpers/asyncToGenerator'), require('broker-factory')) :
    typeof define === 'function' && define.amd ? define(['exports', '@babel/runtime/regenerator', '@babel/runtime/helpers/asyncToGenerator', 'broker-factory'], factory) :
    (global = global || self, factory(global.asyncArrayBufferBroker = {}, global._regeneratorRuntime, global._asyncToGenerator, global.brokerFactory));
}(this, function (exports, _regeneratorRuntime, _asyncToGenerator, brokerFactory) { 'use strict';

    _regeneratorRuntime = _regeneratorRuntime && _regeneratorRuntime.hasOwnProperty('default') ? _regeneratorRuntime['default'] : _regeneratorRuntime;
    _asyncToGenerator = _asyncToGenerator && _asyncToGenerator.hasOwnProperty('default') ? _asyncToGenerator['default'] : _asyncToGenerator;

    var wrap = brokerFactory.createBroker({
      allocate: function allocate(_ref) {
        var call = _ref.call;
        return (
          /*#__PURE__*/
          function () {
            var _ref2 = _asyncToGenerator(
            /*#__PURE__*/
            _regeneratorRuntime.mark(function _callee(length) {
              return _regeneratorRuntime.wrap(function _callee$(_context) {
                while (1) {
                  switch (_context.prev = _context.next) {
                    case 0:
                      return _context.abrupt("return", call('allocate', {
                        length: length
                      }));

                    case 1:
                    case "end":
                      return _context.stop();
                  }
                }
              }, _callee, this);
            }));

            return function (_x) {
              return _ref2.apply(this, arguments);
            };
          }()
        );
      },
      deallocate: function deallocate(_ref3) {
        var notify = _ref3.notify;
        return function (arrayBuffer) {
          notify('deallocate', {
            arrayBuffer: arrayBuffer
          }, [arrayBuffer]);
        };
      }
    });
    var load = function load(url) {
      var worker = new Worker(url);
      return wrap(worker);
    };

    exports.wrap = wrap;
    exports.load = load;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
