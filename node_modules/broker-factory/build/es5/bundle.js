(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@babel/runtime/helpers/defineProperty'), require('@babel/runtime/helpers/slicedToArray'), require('fast-unique-numbers'), require('@babel/runtime/regenerator'), require('@babel/runtime/helpers/asyncToGenerator')) :
    typeof define === 'function' && define.amd ? define(['exports', '@babel/runtime/helpers/defineProperty', '@babel/runtime/helpers/slicedToArray', 'fast-unique-numbers', '@babel/runtime/regenerator', '@babel/runtime/helpers/asyncToGenerator'], factory) :
    (global = global || self, factory(global.brokerFactory = {}, global._defineProperty, global._slicedToArray, global.fastUniqueNumbers, global._regeneratorRuntime, global._asyncToGenerator));
}(this, function (exports, _defineProperty, _slicedToArray, fastUniqueNumbers, _regeneratorRuntime, _asyncToGenerator) { 'use strict';

    _defineProperty = _defineProperty && _defineProperty.hasOwnProperty('default') ? _defineProperty['default'] : _defineProperty;
    _slicedToArray = _slicedToArray && _slicedToArray.hasOwnProperty('default') ? _slicedToArray['default'] : _slicedToArray;
    _regeneratorRuntime = _regeneratorRuntime && _regeneratorRuntime.hasOwnProperty('default') ? _regeneratorRuntime['default'] : _regeneratorRuntime;
    _asyncToGenerator = _asyncToGenerator && _asyncToGenerator.hasOwnProperty('default') ? _asyncToGenerator['default'] : _asyncToGenerator;

    var isMessagePort = function isMessagePort(sender) {
      return typeof sender.start === 'function';
    };

    var PORT_MAP = new WeakMap();

    var extendBrokerImplementation = function extendBrokerImplementation(partialBrokerImplementation) {
      return Object.assign({}, partialBrokerImplementation, {
        connect: function connect(_ref) {
          var call = _ref.call;
          return (
            /*#__PURE__*/
            _asyncToGenerator(
            /*#__PURE__*/
            _regeneratorRuntime.mark(function _callee() {
              var _ref3, port1, port2, portId;

              return _regeneratorRuntime.wrap(function _callee$(_context) {
                while (1) {
                  switch (_context.prev = _context.next) {
                    case 0:
                      _ref3 = new MessageChannel(), port1 = _ref3.port1, port2 = _ref3.port2;
                      _context.next = 3;
                      return call('connect', {
                        port: port1
                      }, [port1]);

                    case 3:
                      portId = _context.sent;
                      PORT_MAP.set(port2, portId);
                      return _context.abrupt("return", port2);

                    case 6:
                    case "end":
                      return _context.stop();
                  }
                }
              }, _callee, this);
            }))
          );
        },
        disconnect: function disconnect(_ref4) {
          var call = _ref4.call;
          return (
            /*#__PURE__*/
            function () {
              var _ref5 = _asyncToGenerator(
              /*#__PURE__*/
              _regeneratorRuntime.mark(function _callee2(port) {
                var portId;
                return _regeneratorRuntime.wrap(function _callee2$(_context2) {
                  while (1) {
                    switch (_context2.prev = _context2.next) {
                      case 0:
                        portId = PORT_MAP.get(port);

                        if (!(portId === undefined)) {
                          _context2.next = 3;
                          break;
                        }

                        throw new Error('The given port is not connected.');

                      case 3:
                        _context2.next = 5;
                        return call('disconnect', {
                          portId: portId
                        });

                      case 5:
                      case "end":
                        return _context2.stop();
                    }
                  }
                }, _callee2, this);
              }));

              return function (_x) {
                return _ref5.apply(this, arguments);
              };
            }()
          );
        },
        isSupported: function isSupported(_ref6) {
          var call = _ref6.call;
          return function () {
            return call('isSupported');
          };
        }
      });
    };

    var ONGOING_REQUESTS = new WeakMap();

    var createOrGetOngoingRequests = function createOrGetOngoingRequests(sender) {
      if (ONGOING_REQUESTS.has(sender)) {
        // @todo TypeScript needs to be convinced that has() works as expected.
        return ONGOING_REQUESTS.get(sender);
      }

      var ongoingRequests = new Map();
      ONGOING_REQUESTS.set(sender, ongoingRequests);
      return ongoingRequests;
    };

    var createBroker = function createBroker(brokerImplementation) {
      var fullBrokerImplementation = extendBrokerImplementation(brokerImplementation);
      return function (sender) {
        var ongoingRequests = createOrGetOngoingRequests(sender);
        sender.addEventListener('message', function (_ref) {
          var message = _ref.data;
          var id = message.id;

          if (id !== null && ongoingRequests.has(id)) {
            var _ongoingRequests$get = ongoingRequests.get(id),
                reject = _ongoingRequests$get.reject,
                resolve = _ongoingRequests$get.resolve;

            ongoingRequests.delete(id);

            if (message.error === undefined) {
              resolve(message.result);
            } else {
              reject(new Error(message.error.message));
            }
          }
        });

        if (isMessagePort(sender)) {
          sender.start();
        }

        var call = function call(method) {
          var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
          var transferables = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
          return new Promise(function (resolve, reject) {
            var id = fastUniqueNumbers.generateUniqueNumber(ongoingRequests);
            ongoingRequests.set(id, {
              reject: reject,
              resolve: resolve
            });

            if (params === null) {
              sender.postMessage({
                id: id,
                method: method
              }, transferables);
            } else {
              sender.postMessage({
                id: id,
                method: method,
                params: params
              }, transferables);
            }
          });
        };

        var notify = function notify(method, params) {
          var transferables = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
          sender.postMessage({
            id: null,
            method: method,
            params: params
          }, transferables);
        };

        var functions = {};

        var _arr = Object.entries(fullBrokerImplementation);

        for (var _i = 0; _i < _arr.length; _i++) {
          var _arr$_i = _slicedToArray(_arr[_i], 2),
              key = _arr$_i[0],
              handler = _arr$_i[1];

          functions = Object.assign({}, functions, _defineProperty({}, key, handler({
            call: call,
            notify: notify
          })));
        }

        return Object.assign({}, functions);
      };
    };

    exports.createBroker = createBroker;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
